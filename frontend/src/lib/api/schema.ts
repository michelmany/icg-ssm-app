/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get list of users */
        get: {
            parameters: {
                query?: {
                    name?: string;
                    school?: string;
                    role?: "ADMIN" | "TEACHER" | "THERAPIST" | "PROVIDER" | "SUPERVISOR";
                    status?: "ACTIVE" | "INACTIVE";
                    sortBy?: "name" | "school" | "role" | "status";
                    sortOrder?: "asc" | "desc";
                    perPage?: number;
                    page?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Object with data and pagination metadata */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["User"][];
                            pagination: components["schemas"]["Pagination"];
                        };
                    };
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        put?: never;
        /** @description Create a user */
        post: {
            parameters: {
                query?: {
                    sendInvite?: boolean | null;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        firstName: string;
                        lastName: string;
                        /** Format: email */
                        email: string;
                        /** @enum {string} */
                        securityLevel: "FULL_ACCESS" | "LIMITED" | "READ_ONLY";
                        /** Format: uuid */
                        schoolId: string;
                        /** Format: uuid */
                        roleId: string;
                        phoneNumber: string | null;
                        /** @enum {string} */
                        status: "ACTIVE" | "INACTIVE";
                    };
                };
            };
            responses: {
                /** @description The user has been created (and invited, if chosen) successfully. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Object with data containing user information. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["User"];
                        };
                    };
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        /** @description Delete a user */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The user has been deleted successfully. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        options?: never;
        head?: never;
        /** @description Update a user */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        firstName?: string;
                        lastName?: string;
                        /** Format: email */
                        email?: string;
                        /** @enum {string} */
                        securityLevel?: "FULL_ACCESS" | "LIMITED" | "READ_ONLY";
                        /** Format: uuid */
                        schoolId?: string;
                        /** Format: uuid */
                        roleId?: string;
                        phoneNumber?: string | null;
                        /** @enum {string} */
                        status?: "ACTIVE" | "INACTIVE";
                    };
                };
            };
            responses: {
                /** @description The user has been updated successfully. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        trace?: never;
    };
    "/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of roles */
        get: {
            parameters: {
                query?: {
                    perPage?: number;
                    page?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Object with data and pagination metadata */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["Role"][];
                            pagination: components["schemas"]["Pagination"];
                        };
                    };
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Authenticate with email and password. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** Format: email */
                        email: string;
                        password: string;
                    };
                };
            };
            responses: {
                /** @description User with permissions object. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["UserWithPermissions"];
                        };
                    };
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/start-password-reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Request a password reset token that will be sent over email. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** Format: email */
                        email: string;
                    };
                };
            };
            responses: {
                /** @description The password reset email will be sent if the user exists. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Reset a user's password. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** Format: email */
                        email: string;
                        token: string;
                        newPassword: string;
                    };
                };
            };
            responses: {
                /** @description The password has been reset successfully. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/accept-invite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Accept an invite and set the account's password. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** Format: email */
                        email: string;
                        token: string;
                        newPassword: string;
                    };
                };
            };
            responses: {
                /** @description The password has been set successfully. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/schools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of schools */
        get: {
            parameters: {
                query?: {
                    name?: string;
                    district?: string;
                    state?: string;
                    contactEmail?: string;
                    maxTravelDistance?: number;
                    maxStudentsPerTest?: number;
                    sortBy?: "name" | "district" | "state" | "contactEmail" | "maxTravelDistance" | "maxStudentsPerTest";
                    sortOrder?: "asc" | "desc";
                    perPage?: number;
                    page?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Object with data and pagination metadata */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["School"][];
                            pagination: components["schemas"]["Pagination"];
                        };
                    };
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        put?: never;
        /** @description Create a school */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        name: string;
                        district: string;
                        state: string;
                        /** Format: email */
                        contactEmail: string;
                        maxTravelDistance: number;
                        maxStudentsPerTest: number;
                    };
                };
            };
            responses: {
                /** @description The school has been created successfully. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/schools/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a school */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Object with data containing school information. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["School"];
                        };
                    };
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        /** @description Delete a school */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The school has been deleted successfully. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        options?: never;
        head?: never;
        /** @description Update a school */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        name?: string;
                        district?: string;
                        state?: string;
                        /** Format: email */
                        contactEmail?: string;
                        maxTravelDistance?: number;
                        maxStudentsPerTest?: number;
                    };
                };
            };
            responses: {
                /** @description The school has been updated successfully. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        trace?: never;
    };
    "/students": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of students */
        get: {
            parameters: {
                query?: {
                    name?: string;
                    dob?: string | null;
                    gradeLevel?: number | null;
                    school?: string;
                    parent?: string;
                    studentCode?: string;
                    status?: "ACTIVE" | "INACTIVE";
                    confirmationStatus?: "CONFIRMED" | "PENDING" | "RESCHEDULED";
                    teacherId?: string;
                    sortBy?: "name" | "dob" | "gradeLevel" | "school" | "parent" | "studentCode" | "status" | "confirmationStatus";
                    sortOrder?: "asc" | "desc";
                    perPage?: number;
                    page?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Object with data and pagination metadata */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["Student"][];
                            pagination: components["schemas"]["Pagination"];
                        };
                    };
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        put?: never;
        /** @description Create a student */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        firstName: string;
                        lastName: string;
                        dob: string | null;
                        gradeLevel: number;
                        /** Format: uuid */
                        schoolId: string;
                        /** Format: uuid */
                        parentId: string;
                        studentCode: string;
                        /** @enum {string} */
                        status: "ACTIVE" | "INACTIVE";
                        /** @enum {string} */
                        confirmationStatus: "CONFIRMED" | "PENDING" | "RESCHEDULED";
                        accommodationIds?: string[];
                        teacherIds?: string[];
                        testIds?: string[];
                    };
                };
            };
            responses: {
                /** @description The student has been created successfully. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/students/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a student */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Object with data containing student information. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["Student"];
                        };
                    };
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        /** @description Delete a student */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The student has been deleted successfully. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        options?: never;
        head?: never;
        /** @description Update a student */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        firstName?: string;
                        lastName?: string;
                        dob?: string | null;
                        gradeLevel?: number;
                        /** Format: uuid */
                        schoolId?: string;
                        /** Format: uuid */
                        parentId?: string;
                        studentCode?: string;
                        /** @enum {string} */
                        status?: "ACTIVE" | "INACTIVE";
                        /** @enum {string} */
                        confirmationStatus?: "CONFIRMED" | "PENDING" | "RESCHEDULED";
                        accommodationIds?: string[];
                        teacherIds?: string[];
                        testIds?: string[];
                    };
                };
            };
            responses: {
                /** @description The student has been updated successfully. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        trace?: never;
    };
    "/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of providers */
        get: {
            parameters: {
                query?: {
                    name?: string;
                    licenseNumber?: string;
                    credentials?: string;
                    nssEnabled?: boolean;
                    status?: "ACTIVE" | "INACTIVE" | "PENDING" | "SUSPENDED";
                    serviceFeeStructure?: "HOURLY" | "FLAT_RATE" | "PER_DIEM";
                    sortBy?: "name" | "licenseNumber" | "credentials" | "nssEnabled" | "serviceFeeStructure" | "status";
                    sortOrder?: "asc" | "desc";
                    perPage?: number;
                    page?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Object with data and pagination metadata */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["Provider"][];
                            pagination: components["schemas"]["Pagination"];
                        };
                    };
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        put?: never;
        /** @description Create a provider */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** Format: uuid */
                        userId: string;
                        licenseNumber: string;
                        credentials: string;
                        signature: string | null;
                        /**
                         * @default HOURLY
                         * @enum {string}
                         */
                        serviceFeeStructure?: "HOURLY" | "FLAT_RATE" | "PER_DIEM";
                        nssEnabled: boolean;
                        reviewNotes: {
                            notes: string;
                        };
                        /**
                         * @default ACTIVE
                         * @enum {string}
                         */
                        status?: "ACTIVE" | "INACTIVE" | "PENDING" | "SUSPENDED";
                    };
                };
            };
            responses: {
                /** @description The provider has been created successfully. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a provider */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Object with data containing provider information. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["Provider"];
                        };
                    };
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        /** @description Delete a provider */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The provider has been deleted successfully. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        options?: never;
        head?: never;
        /** @description Update a provider */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** Format: uuid */
                        userId?: string;
                        licenseNumber?: string;
                        credentials?: string;
                        signature?: string | null;
                        /**
                         * @default HOURLY
                         * @enum {string}
                         */
                        serviceFeeStructure?: "HOURLY" | "FLAT_RATE" | "PER_DIEM";
                        nssEnabled?: boolean;
                        reviewNotes?: {
                            notes: string;
                        };
                        /**
                         * @default ACTIVE
                         * @enum {string}
                         */
                        status?: "ACTIVE" | "INACTIVE" | "PENDING" | "SUSPENDED";
                    };
                };
            };
            responses: {
                /** @description The provider has been updated successfully. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        trace?: never;
    };
    "/therapists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of therapists */
        get: {
            parameters: {
                query?: {
                    disciplines?: string;
                    licenseNumber?: string;
                    medicaidNationalProviderId?: number | null;
                    stateMedicaidProviderId?: number | null;
                    status?: "ACTIVE" | "INACTIVE" | "PENDING";
                    name?: string;
                    sortBy?: "disciplines" | "licenseNumber" | "medicaidNationalProviderId" | "stateMedicaidProviderId" | "status" | "name";
                    sortOrder?: "asc" | "desc";
                    perPage?: number;
                    page?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Object with data and pagination metadata */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["Therapist"][];
                            pagination: components["schemas"]["Pagination"];
                        };
                    };
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        put?: never;
        /** @description Create a therapist */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        disciplines: string;
                        licenseNumber: string;
                        medicaidNationalProviderId: number;
                        socialSecurity: string;
                        stateMedicaidProviderId: number;
                        /**
                         * @default PENDING
                         * @enum {string}
                         */
                        status?: "ACTIVE" | "INACTIVE" | "PENDING";
                        /** Format: uuid */
                        userId: string;
                    };
                };
            };
            responses: {
                /** @description The therapist has been created successfully. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/therapists/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a therapist */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Object with data containing therapist information. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["Therapist"];
                        };
                    };
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        /** @description Delete a therapist */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The therapist has been deleted successfully. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        options?: never;
        head?: never;
        /** @description Update a therapist */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        disciplines?: string;
                        licenseNumber?: string;
                        medicaidNationalProviderId?: number;
                        socialSecurity?: string;
                        stateMedicaidProviderId?: number;
                        /**
                         * @default PENDING
                         * @enum {string}
                         */
                        status?: "ACTIVE" | "INACTIVE" | "PENDING";
                        /** Format: uuid */
                        userId?: string;
                    };
                };
            };
            responses: {
                /** @description The therapist has been updated successfully. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        trace?: never;
    };
    "/therapy-services": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of therapy services */
        get: {
            parameters: {
                query?: {
                    student?: string;
                    studentId?: string;
                    provider?: string;
                    serviceType?: "SPEECH" | "OCCUPATIONAL" | "PHYSICAL";
                    status?: "SCHEDULED" | "COMPLETED" | "MISSED";
                    serviceBeginDate?: string | null;
                    sessionDate?: string | null;
                    deliveryMode?: "VIRTUAL" | "IN_PERSON";
                    nextMeetingDate?: string | null;
                    sortBy?: "student" | "provider" | "serviceType" | "status" | "serviceBeginDate" | "sessionDate" | "deliveryMode" | "nextMeetingDate";
                    sortOrder?: "asc" | "desc";
                    perPage?: number;
                    page?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Object with data and pagination metadata */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["TherapyService"][];
                            pagination: components["schemas"]["Pagination"];
                        };
                    };
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        put?: never;
        /** @description Create a therapy service */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** Format: uuid */
                        studentId: string;
                        /** Format: uuid */
                        providerId: string;
                        /** @enum {string} */
                        serviceType: "SPEECH" | "OCCUPATIONAL" | "PHYSICAL";
                        /**
                         * @default SCHEDULED
                         * @enum {string}
                         */
                        status?: "SCHEDULED" | "COMPLETED" | "MISSED";
                        serviceBeginDate: string | null;
                        sessionDate: string | null;
                        sessionNotes: string;
                        /** @enum {string} */
                        deliveryMode: "VIRTUAL" | "IN_PERSON";
                        goalTracking?: unknown;
                        ieps?: unknown;
                        nextMeetingDate: string | null;
                    };
                };
            };
            responses: {
                /** @description The therapy service has been created successfully. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/therapy-services/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a therapy service */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Object with data containing therapy service information. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["TherapyService"];
                        };
                    };
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        /** @description Delete a therapy service */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The therapy service has been deleted successfully. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        options?: never;
        head?: never;
        /** @description Update a therapy service */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** Format: uuid */
                        studentId?: string;
                        /** Format: uuid */
                        providerId?: string;
                        /** @enum {string} */
                        serviceType?: "SPEECH" | "OCCUPATIONAL" | "PHYSICAL";
                        /**
                         * @default SCHEDULED
                         * @enum {string}
                         */
                        status?: "SCHEDULED" | "COMPLETED" | "MISSED";
                        serviceBeginDate?: string | null;
                        sessionDate?: string | null;
                        sessionNotes?: string;
                        /** @enum {string} */
                        deliveryMode?: "VIRTUAL" | "IN_PERSON";
                        goalTracking?: unknown;
                        ieps?: unknown;
                        nextMeetingDate?: string | null;
                    };
                };
            };
            responses: {
                /** @description The therapy service has been updated successfully. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        trace?: never;
    };
    "/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of reports */
        get: {
            parameters: {
                query?: {
                    reportType?: "PROGRESS" | "ATTENDANCE" | "BILLING" | "ELIGIBILITY";
                    therapyServiceId?: string;
                    schoolName?: string;
                    studentName?: string;
                    therapyServiceType?: "SPEECH" | "OCCUPATIONAL" | "PHYSICAL";
                    createdAt?: string | null;
                    sortBy?: "reportType" | "createdAt" | "updatedAt" | "content" | "schoolName" | "studentName" | "therapyServiceType";
                    sortOrder?: "asc" | "desc";
                    perPage?: number;
                    page?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Object with data and pagination metadata */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["Report"][];
                            pagination: components["schemas"]["Pagination"];
                        };
                    };
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        put?: never;
        /** @description Create a report */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** Format: uuid */
                        schoolId: string;
                        /** Format: uuid */
                        studentId: string;
                        /** Format: uuid */
                        therapyServiceId: string;
                        /** @enum {string} */
                        reportType: "PROGRESS" | "ATTENDANCE" | "BILLING" | "ELIGIBILITY";
                        content: string;
                        /** @default 2025-03-27T21:45:09.629Z */
                        createdAt?: string;
                    };
                };
            };
            responses: {
                /** @description The report has been created successfully. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** Format: uuid */
                            id: string;
                        };
                    };
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a report */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Object with data containing report information. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["Report"];
                        };
                    };
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        /** @description Delete a report */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The report has been deleted successfully. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        options?: never;
        head?: never;
        /** @description Update a report */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** Format: uuid */
                        schoolId?: string;
                        /** Format: uuid */
                        studentId?: string;
                        /** Format: uuid */
                        therapyServiceId?: string;
                        /** @enum {string} */
                        reportType?: "PROGRESS" | "ATTENDANCE" | "BILLING" | "ELIGIBILITY";
                        content?: string;
                        /** @default 2025-03-27T21:45:09.629Z */
                        createdAt?: string;
                    };
                };
            };
            responses: {
                /** @description The report has been updated successfully. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        trace?: never;
    };
    "/invoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of invoices */
        get: {
            parameters: {
                query?: {
                    status?: "PENDING" | "PAID" | "DECLINED";
                    providerName?: string;
                    studentName?: string;
                    therapyServiceType?: "SPEECH" | "OCCUPATIONAL" | "PHYSICAL";
                    dateIssuedFrom?: string | null;
                    dateIssuedTo?: string | null;
                    sortBy?: "status" | "amount" | "dateIssued" | "createdAt" | "updatedAt" | "providerName" | "studentName" | "therapyServiceType";
                    sortOrder?: "asc" | "desc";
                    perPage?: number;
                    page?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Object with data and pagination metadata */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["Invoice"][];
                            pagination: components["schemas"]["Pagination"];
                        };
                    };
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        put?: never;
        /** @description Create an invoice */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** Format: uuid */
                        providerId: string;
                        /** Format: uuid */
                        studentId: string;
                        /** Format: uuid */
                        therapyServiceId: string;
                        amount: number;
                        /**
                         * @default PENDING
                         * @enum {string}
                         */
                        status?: "PENDING" | "PAID" | "DECLINED";
                        /** @default 2025-03-27T21:45:09.716Z */
                        dateIssued?: string;
                    };
                };
            };
            responses: {
                /** @description The invoice has been created successfully. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** Format: uuid */
                            id: string;
                        };
                    };
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoices/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get an invoice */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Object with data containing invoice information. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["Invoice"];
                        };
                    };
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        /** @description Delete an invoice */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The invoice has been deleted successfully. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        options?: never;
        head?: never;
        /** @description Update an invoice */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** Format: uuid */
                        providerId?: string;
                        /** Format: uuid */
                        studentId?: string;
                        /** Format: uuid */
                        therapyServiceId?: string;
                        amount?: number;
                        /**
                         * @default PENDING
                         * @enum {string}
                         */
                        status?: "PENDING" | "PAID" | "DECLINED";
                        /** @default 2025-03-27T21:45:09.716Z */
                        dateIssued?: string;
                    };
                };
            };
            responses: {
                /** @description The invoice has been updated successfully. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["GenericErrorResponse"];
                401: components["responses"]["GenericErrorResponse"];
                403: components["responses"]["GenericErrorResponse"];
                404: components["responses"]["GenericErrorResponse"];
                500: components["responses"]["GenericErrorResponse"];
            };
        };
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        User: {
            /** Format: uuid */
            id: string;
            firstName: string;
            lastName: string;
            /** Format: email */
            email: string;
            phoneNumber: string | null;
            /** @enum {string} */
            securityLevel: "FULL_ACCESS" | "LIMITED" | "READ_ONLY";
            /** @enum {string} */
            status: "ACTIVE" | "INACTIVE";
            school: {
                /** Format: uuid */
                id: string;
                name: string;
            };
            role: {
                /** Format: uuid */
                id: string;
                name: string;
            };
            createdAt: string;
            updatedAt: string;
        };
        Pagination: {
            pages: number;
            total: number;
        };
        Role: {
            /** Format: uuid */
            id: string;
            name: string;
        };
        UserWithPermissions: {
            /** Format: uuid */
            id: string;
            firstName: string;
            lastName: string;
            /** Format: email */
            email: string;
            phoneNumber: string | null;
            /** @enum {string} */
            securityLevel: "FULL_ACCESS" | "LIMITED" | "READ_ONLY";
            /** @enum {string} */
            status: "ACTIVE" | "INACTIVE";
            role: {
                /** Format: uuid */
                id: string;
                name: string;
            };
            createdAt: string;
            updatedAt: string;
            permissions: ("MANAGE_USERS" | "ASSIGN_ROLES" | "DEACTIVATE_USERS" | "RESET_PASSWORDS" | "CONFIGURE_TEST_SITES" | "SCHEDULE_TESTS" | "ASSIGN_ACCOMMODATIONS" | "TRACK_STUDENT_CONFIRMATIONS" | "MANAGE_EQUIPMENT" | "MANAGE_TESTS" | "ASSIGN_STUDENTS" | "TRACK_ATTENDANCE" | "SEND_REMINDERS" | "VIEW_REPORTS" | "SCAN_QR_CODES" | "REPORT_INCIDENTS" | "CONFIRM_TEST_LOCATION" | "VIEW_RESULT" | "VIEW_INVOICES")[];
        };
        School: {
            /** Format: uuid */
            id: string;
            name: string;
            district: string;
            state: string;
            /** Format: email */
            contactEmail: string;
            maxTravelDistance: number;
            maxStudentsPerTest: number;
            createdAt: string;
            updatedAt: string;
        };
        Student: {
            /** Format: uuid */
            id: string;
            firstName: string;
            lastName: string;
            /** Format: date */
            dob: string;
            gradeLevel: number;
            school: {
                /** Format: uuid */
                id: string;
                name: string;
            };
            parent: {
                /** Format: uuid */
                id: string;
                firstName: string;
                lastName: string;
                /** Format: email */
                email: string;
            };
            studentCode: string;
            /** @enum {string} */
            status: "ACTIVE" | "INACTIVE";
            /** @enum {string} */
            confirmationStatus: "CONFIRMED" | "PENDING" | "RESCHEDULED";
            createdAt: string;
            updatedAt: string;
            accommodations?: {
                /** Format: uuid */
                id: string;
                name: string;
                details?: unknown;
            }[];
            assignedTeachers?: {
                /** Format: uuid */
                id: string;
                firstName: string;
                lastName: string;
            }[];
            assignedTests?: string[];
        };
        Provider: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            userId: string;
            user: {
                /** Format: uuid */
                id: string;
                firstName: string;
                lastName: string;
                /** Format: email */
                email: string;
            };
            licenseNumber: string | null;
            credentials: string;
            signature: string | null;
            /** @enum {string} */
            serviceFeeStructure: "HOURLY" | "FLAT_RATE" | "PER_DIEM";
            nssEnabled: boolean;
            reviewNotes: {
                notes: string;
            };
            /**
             * @default ACTIVE
             * @enum {string}
             */
            status: "ACTIVE" | "INACTIVE" | "PENDING" | "SUSPENDED";
            documentIds: string[];
            contractIds: string[];
            contactIds: string[];
            createdAt: string;
            updatedAt: string;
        };
        Therapist: {
            /** Format: uuid */
            id: string;
            disciplines: string;
            licenseNumber: string;
            medicaidNationalProviderId: number;
            socialSecurity: string;
            stateMedicaidProviderId: number;
            /**
             * @default ACTIVE
             * @enum {string}
             */
            status: "ACTIVE" | "INACTIVE" | "PENDING";
            /** Format: uuid */
            userId: string;
            name: string | null;
            createdAt: string;
            updatedAt: string;
        };
        TherapyService: {
            /** Format: uuid */
            id: string;
            student: {
                /** Format: uuid */
                id: string;
                firstName: string;
                lastName: string;
            };
            provider: {
                /** Format: uuid */
                id: string;
                user: {
                    /** Format: uuid */
                    id: string;
                    firstName: string;
                    lastName: string;
                    /** Format: email */
                    email: string;
                };
            };
            /** @enum {string} */
            serviceType: "SPEECH" | "OCCUPATIONAL" | "PHYSICAL";
            /** @enum {string} */
            status: "SCHEDULED" | "COMPLETED" | "MISSED";
            serviceBeginDate: string;
            /** Format: date */
            sessionDate: string;
            sessionNotes: string;
            /** @enum {string} */
            deliveryMode: "VIRTUAL" | "IN_PERSON";
            goalTracking?: unknown;
            ieps?: unknown;
            /** Format: date */
            nextMeetingDate: string | null;
            deletedAt: string | null;
            createdAt: string;
            updatedAt: string;
        };
        Report: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            schoolId: string;
            /** Format: uuid */
            studentId: string;
            /** Format: uuid */
            therapyServiceId: string;
            /** @enum {string} */
            reportType: "PROGRESS" | "ATTENDANCE" | "BILLING" | "ELIGIBILITY";
            content: string;
            /** @default 2025-03-27T21:45:09.629Z */
            createdAt: string;
            updatedAt: string;
            deletedAt: string | null;
            school?: {
                /** Format: uuid */
                id: string;
                name: string;
            };
            student?: {
                /** Format: uuid */
                id: string;
                firstName: string;
                lastName: string;
            };
            therapyService?: {
                /** Format: uuid */
                id: string;
                /** @enum {string} */
                serviceType: "SPEECH" | "OCCUPATIONAL" | "PHYSICAL";
            };
        };
        Invoice: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            providerId: string;
            /** Format: uuid */
            studentId: string;
            /** Format: uuid */
            therapyServiceId: string;
            amount: number;
            /** @enum {string} */
            status: "PENDING" | "PAID" | "DECLINED";
            dateIssued: string | null;
            createdAt: string;
            updatedAt: string;
            deletedAt: string | null;
            provider: {
                /** Format: uuid */
                id: string;
                user: {
                    /** Format: uuid */
                    id: string;
                    firstName: string;
                    lastName: string;
                    /** Format: email */
                    email: string;
                };
            };
            student: {
                /** Format: uuid */
                id: string;
                firstName: string;
                lastName: string;
            };
            therapyService: {
                /** Format: uuid */
                id: string;
                /** @enum {string} */
                serviceType: "SPEECH" | "OCCUPATIONAL" | "PHYSICAL";
            };
        };
    };
    responses: {
        /** @description The request failed. */
        GenericErrorResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    message?: string;
                    code?: string;
                    errors?: string[];
                };
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
